import React, { useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { parseCookies } from 'nookies';
import Head from 'next/head';
import styles from '@/styles/Pages/Cart.module.css';
import Button from '@/components/Button';
import routes from '@/routes';

function Cart() {
  const router = useRouter();
  const [cart, setCart] = useState<any>();
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);

  const deleteFromCart = useCallback((itemId: number) => {
    if (typeof window !== 'undefined' && window.localStorage) {
      const localStorageCartString = localStorage.getItem('cart') as string;
      const localStorageCart = JSON.parse(localStorageCartString);

      const updatedCart = localStorageCart.filter((item: any) => item.id !== itemId);
      setCart(updatedCart);
      localStorage.setItem('cart', JSON.stringify(updatedCart));
    }
  }, []);

  const removeOneFromCart = useCallback((itemId: number) => {
    if (typeof window !== 'undefined' && window.localStorage) {
      const localStorageCartString = localStorage.getItem('cart') as string;
      const localStorageCart = JSON.parse(localStorageCartString);

      const existingItemIndex = localStorageCart
        .findIndex((item: any) => item.id === itemId) as number;

      if (localStorageCart[existingItemIndex].quantity - 1 === 0) {
        deleteFromCart(itemId);
        return;
      }

      localStorageCart[existingItemIndex] = {
        ...localStorageCart[existingItemIndex],
        quantity: localStorageCart[existingItemIndex].quantity - 1,
      };

      setCart(localStorageCart);
      localStorage.setItem('cart', JSON.stringify(localStorageCart));
    }
  }, [deleteFromCart]);

  const redirectToPayment = useCallback(() => (isLoggedIn ? router.push('/payment') : router.push(`${routes.login()}?pay=true`)), [isLoggedIn, router]);

  useEffect(() => {
    if (typeof window !== 'undefined' && window.localStorage) {
      const localStorageCartString = localStorage.getItem('cart') as string;

      if (localStorageCartString === null) {
        setCart([]);

        return;
      }

      const localStorageCart = JSON.parse(localStorageCartString);
      setCart(localStorageCart);
    }
  }, []);

  useEffect(() => {
    const { token } = parseCookies(null);

    if (token) {
      setIsLoggedIn(true);
    }
  }, [router]);

  return (
    <main className={styles.main}>
      <Head>
        <title>The Bradery - Panier</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className={styles.mainTitle}>Panier</h1>

      <div className={styles.cartContainer}>
        {cart?.length > 0 ? (
          cart.map((item: any) => (
            <div
              key={item.id}
              className={styles.productCard}
            >
              <p>{item.name}</p>
              <p>{item.price}</p>
              <p>
                {item.quantity}
                {' '}
                {item.quantity > 1 ? 'pièces' : 'pièce'}
              </p>

              <Button onClickAction={() => removeOneFromCart(item.id)}>
                Retirer 1 du panier
              </Button>

              <Button onClickAction={() => deleteFromCart(item.id)}>
                Supprimer
              </Button>
            </div>
          ))
        ) : (
          <p className={styles.emptyCartText}>Votre panier est vide</p>
        )}
      </div>

      <Button
        onClickAction={() => redirectToPayment()}
        disabled={cart?.length === 0}
      >
        Passer au paiement
      </Button>

    </main>
  );
}

export default Cart;
